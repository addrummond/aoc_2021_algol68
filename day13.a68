MODE COORD = STRUCT (
  INT x, y
);

OP = = (COORD c1, COORD c2) BOOL: (x OF c1 = x OF c2) AND (y OF c1 = y OF c2);

# A hash set with a fixed (but parameterizable) bucket size. #
MODE HASH = STRUCT (
  INT hash bits,
  REF []REF FLEX[]COORD buckets,
  REF []INT n items,
  INT size
);

MODE FOLD = STRUCT(
  INT n,
  CHAR along
);

PROC new hash = (INT hash bits) REF HASH:
BEGIN
  INT n buckets := ABS(BIN(1) SHL (hash bits - 1));
  REF []REF FLEX[]COORD buckets := HEAP [n buckets]REF FLEX[]COORD;
  FOR i FROM 1 TO n buckets DO
    buckets[i] := HEAP FLEX [1:4]COORD
  OD;
  REF []INT n items := HEAP [1:n buckets]INT;
  FOR i FROM 1 TO n buckets DO
    n items[i] := 0
  OD;

  HEAP HASH := (
    hash bits,
    buckets,
    n items,
    0
  )
END;

PROC hash func = (INT hash bits, COORD c) INT:
BEGIN
  INT hashval := ABS(BIN(ABS(x OF c)) XOR BIN(ABS(y OF c)));
  BITS mask := BIN(ABS(BIN(1) SHL (hash bits - 1)) - 1);
  ABS(BIN(hashval) AND mask) + 1
END;

PROC insert = (REF HASH hash, COORD c) VOID:
BEGIN
  INT key := hash func(hash bits OF hash, c);
  REF FLEX[]COORD bucket := (buckets OF hash)[key];

  # is it already here? #
  BOOL found it := FALSE;
  FOR i FROM 1 TO (n items OF hash)[key] DO
    IF bucket[i] = c THEN
      found it := TRUE;
      GO TO out
    FI
  OD;
out:

  IF NOT found it THEN
    (size OF hash) +:= 1;
    (n items OF hash)[key] +:= 1;
    IF (n items OF hash)[key] > UPB (buckets OF hash)[key] THEN
      REF FLEX[]COORD new items = HEAP FLEX [2 * UPB (buckets OF hash)[key]]COORD;
      new items[:UPB (buckets OF hash)[key]] := (buckets OF hash)[key];
      (buckets OF hash)[key] := new items
    FI;
    (buckets OF hash)[key][(n items OF hash)[key]] := c
  FI
END;

PROC delete = (REF HASH hash, COORD c) VOID:
BEGIN
  INT key := hash func(hash bits OF hash, c);
  REF FLEX[]COORD bucket = (buckets OF hash)[key];
  INT n items = (n items OF hash)[key];

  FOR i FROM 1 TO n items DO
    IF bucket[i] = c THEN
      bucket[i:n items-1] := bucket[i+1:n items];
      (n items OF hash)[key] -:= 1;
      (size OF hash) -:= 1;
      GO TO out
    FI
  OD;

out: EMPTY
END;

PROC exists = (REF HASH hash, COORD c) BOOL:
BEGIN
  INT key := hash func(hash bits OF hash, c);
  REF FLEX[]COORD bucket = (buckets OF hash)[key];

  BOOL found it := FALSE;
  FOR i FROM 1 TO (n items OF hash)[key] DO
    IF bucket[i] = c THEN
      found it := TRUE;
      GO TO out
    FI
  OD;

out:
  found it
END;

PROC for each = (REF HASH hash, PROC (COORD) VOID iter func) VOID:
BEGIN
  FOR i FROM LWB (buckets OF hash) TO UPB (buckets OF hash) DO
    FOR j FROM 1 TO (n items OF hash)[i] DO
      COORD c := (buckets OF hash)[i][j];
      iter func(c)
    OD
  OD
END;

PROC read lines = (REF FILE in, REF BOOL finished reading, REF FLEX []COORD coords, REF FLEX []FOLD folds) VOID:
BEGIN
  coords := HEAP FLEX [1:8]COORD;
  folds := HEAP FLEX [1:8]FOLD;
  
  BOOL in dots := TRUE;
  INT n coords := 0;
  INT n folds := 0;

  WHILE
    NOT finished reading
  DO
    IF in dots THEN
      IF IF n coords = 0 THEN FALSE ELSE end of line(in) FI THEN # calling end of line() before anything has been read causes an error for some reason #
        in dots := FALSE;
        get(in, newline)
      ELSE
        INT x, y;
        getf(in, ($g, ",", gl$, x, y));
        n coords +:= 1;
        IF n coords > UPB coords THEN
          REF FLEX []COORD new coords = HEAP FLEX [2*UPB coords]COORD;
          new coords[:UPB coords] := coords;
          coords := new coords
        FI;
        coords[n coords] := (x, y)
      FI
    ELSE
      CHAR axis := "0"; # dummy #
      INT val := -1;    # dummy #
      getf(in, ($"fold along ", a, "=", gl$, axis, val));
      IF val /= -1 THEN
        n folds +:= 1;
        IF n folds > UPB folds THEN
          REF FLEX []FOLD new folds = HEAP FLEX [2*UPB folds]FOLD;
          new folds[:UPB folds] := folds;
          folds := new folds
        FI;
        folds[n folds] := (val, axis)
      FI
    FI
  OD;

  coords := coords[:n coords];
  folds := folds[:n folds]
END;

PROC horiz fold = (REF HASH grid, INT yline) VOID:
BEGIN
  [size OF grid]COORD to reflect;
  INT n to reflect := 0;
  for each(grid, (COORD c) VOID: BEGIN
    IF y OF c > yline THEN
      n to reflect +:= 1;
      to reflect[n to reflect] := c
    FI
  END);

  FOR i FROM 1 TO n to reflect DO
    COORD c := to reflect[i];
    COORD new := (x OF c, yline - ((y OF c) - yline));
    delete(grid, c);
    insert(grid, new)
  OD
END;

PROC vert fold = (REF HASH grid, INT xline) VOID:
BEGIN
  [size OF grid]COORD to reflect;
  INT n to reflect := 0;
  for each(grid, (COORD c) VOID: BEGIN
    IF x OF c > xline THEN
      n to reflect +:= 1;
      to reflect[n to reflect] := c
    FI
  END);

  FOR i FROM 1 TO n to reflect DO
    COORD c := to reflect[i];
    COORD new := (xline - ((x OF c) - xline), y OF c);
    delete(grid, c);
    insert(grid, new)
  OD
END;

PROC get dimensions = (REF HASH grid, REF INT xmin, REF INT xmax, REF INT ymin, REF INT ymax) VOID:
BEGIN
  xmin := max int;
  ymin := max int;
  xmax := -max int;
  ymax := -max int;

  for each(grid, (COORD c) VOID: BEGIN
    IF x OF c < xmin THEN
      xmin := x OF c
    FI;
    IF x OF c > xmax THEN
      xmax := x OF c
    FI;
    IF y OF c < ymin THEN
      ymin := y OF c
    FI;
    IF y OF c > ymax THEN
      ymax := y OF c
    FI
  END)
END;

PROC print grid = (REF HASH grid) VOID:
BEGIN
  INT xmin;
  INT xmax;
  INT ymin;
  INT ymax;
  
  get dimensions(grid, xmin, xmax, ymin, ymax);

  printf(($"top left coord=", g(0), "," g(0)l, "n dots="g(0)l$, xmin, ymin, size OF grid));

  FOR y FROM ymin TO ymax DO
    FOR x FROM xmin TO xmax DO
      IF exists(grid, (x, y)) THEN
        print("#")
      ELSE
        print("-")
      FI
    OD;
    print(newline)
  OD
END;

PROC main = VOID:
BEGIN
  FILE in;

  open(in, "data/data13.txt", stand in channel);
  BOOL finished reading := FALSE;
  on logical file end (in, (REF FILE f) BOOL: finished reading := TRUE);
  on format error (in, (REF FILE f) BOOL: finished reading := TRUE);

  REF FLEX []COORD coords := LOC FLEX [1:0]COORD;
  REF FLEX []FOLD folds := LOC FLEX [1:0]FOLD;
  read lines(in, finished reading, coords, folds);

  close(in);

  REF HASH grid := new hash(UPB coords OVER 8);
  FOR i FROM LWB coords TO UPB coords DO
    insert(grid, coords[i])
  OD;

  FOR i FROM LWB folds TO UPB folds DO
    IF along OF folds[i] = "x" THEN
      vert fold(grid, n OF folds[i])
    ELSE
      horiz fold(grid, n OF folds[i])
    FI;

    IF i = 1 THEN
      printf(($"Part 1: number of dots visible after one fold = ", g(0)l$, size OF grid))
    FI
  OD;

  print((newline, "Part 2 - final grid:", newline));
  print grid(grid)
END;

main
