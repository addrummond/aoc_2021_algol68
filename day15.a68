MODE COORD = STRUCT (
  INT x, y
);

OP = = (COORD c1, COORD c2) BOOL: (x OF c1 = x OF c2) AND (y OF c1 = y OF c2);
OP /= = (COORD c1, COORD c2) BOOL: NOT (c1 = c2);

MODE ENTRY = STRUCT(
  COORD c,
  INT d
);

MODE BIN = STRUCT(
  REF FLEX []ENTRY entries,
  INT n
);

MODE PQ = STRUCT(
  REF []BIN bins,
  INT bin size,
  INT n
);

PROC new pq = (INT bin size, INT n bins) REF PQ:
BEGIN
  REF []BIN bins = HEAP [n bins]BIN;
  FOR i FROM LWB bins TO UPB bins DO
    bins[i] := HEAP BIN := (HEAP FLEX [1:2]ENTRY, 0)
  OD;
  HEAP PQ := (bins, bin size, 0)
END;

PROC pop = (REF PQ pq) COORD:
BEGIN
  COORD ret := (-max int, -max int);
  FOR i FROM LWB (bins OF pq) TO UPB (bins OF pq) WHILE (x OF ret) = - max int DO
    IF (n OF (bins OF pq)[i]) > 0 THEN
      # Find the minimum item in this bin and remove it. #
      INT min := max int;
      COORD min c := (-max int, -max int);
      INT min i := 0;
      FOR j FROM 1 TO n OF (bins OF pq)[i] DO
        INT d := d OF (entries OF (bins OF pq)[i])[j];
        IF d < min THEN
          min := d;
          min c := c OF (entries OF (bins OF pq)[i])[j];
          min i := j
        FI
      OD;
      ret := c OF (entries OF (bins OF pq)[i])[min i];
      (entries OF (bins OF pq)[i])[min i:(n OF (bins OF pq)[i])-1] := (entries OF (bins OF pq)[i])[min i+1:(n OF (bins OF pq)[i])];
      (n OF (bins OF pq)[i]) -:= 1
    FI
  OD;

  (n OF pq) -:= 1;
  ret
END;

PROC insert = (REF PQ pq, COORD c, INT d) VOID:
BEGIN
  INT bini := (d OVER (bin size OF pq)) + 1;
  IF bini > UPB (bins OF pq) THEN
    bini := UPB (bins OF pq)
  FI;
  REF FLEX []ENTRY entries := entries OF ((bins OF pq)[bini]);
  (n OF (bins OF pq)[bini]) +:= 1;
  IF (n OF (bins OF pq)[bini]) > UPB entries OF (bins OF pq)[bini] THEN
    REF FLEX []ENTRY new entries = HEAP FLEX [1:2*UPB entries OF (bins OF pq)[bini]]ENTRY;
    new entries[:UPB entries OF (bins OF pq)[bini]] := entries OF (bins OF pq)[bini];
    (entries OF (bins OF pq)[bini]) := new entries
  FI;
  (entries OF (bins OF pq)[bini])[(n OF (bins OF pq)[bini])] := (c, d);
  (n OF pq) +:= 1
END;

PROC del by d = (REF PQ pq, COORD c, INT d) VOID:
BEGIN
  INT bini := (d OVER (bin size OF pq)) + 1;
  IF bini > UPB (bins OF pq) THEN
    bini := UPB (bins OF pq)
  FI;
  REF FLEX []ENTRY entries := entries OF (bins OF pq)[bini];
  BOOL cnt := TRUE;
  FOR i FROM 1 TO (n OF (bins OF pq)[bini]) WHILE cnt DO
    IF c OF entries[i] = c THEN
      cnt := FALSE;
      entries[i:(n OF (bins OF pq)[bini])-1] := entries[i+1:(n OF (bins OF pq)[bini])];
      (n OF (bins OF pq)[bini]) -:= 1;
      (n OF pq) -:= 1
    FI
  OD
END;

PROC in range = (INT width, height, COORD c) BOOL:
  (x OF c) > 0 AND (x OF c) <= width AND (y OF c) > 0 AND (y OF c) <= height;

# assumes source is 1,1 and dest is N,M in NxM grid #
PROC dijkstra := (INT width, INT height, PROC (INT, INT) INT get) INT:
BEGIN
  INT max d = (width + height) * 9;
  INT n bins := width + height;
  INT bin size = max d OVER n bins;

  REF PQ q := new pq(bin size, n bins * 2);
  REF [,]BOOL in q := HEAP [width, height]BOOL;

  REF [,]INT dist := HEAP [width, height]INT;
  REF [,]COORD prev := HEAP [width, height]COORD;

  COORD undefined coord = (-max int, -max int);

  INT length := -get(1,1);

  INT bogus n per dist := (((width * height) OVER max d) * 6) OVER 5;
  INT bogus d := max d + 1;
  INT nc := 0;
  FOR i FROM 1 TO width DO
    FOR j FROM 1 TO height DO
      prev[i,j] := undefined coord;

      IF i = 1 AND j = 1 THEN
        dist[i, j] := 0;
        insert(q, (i, j), 0)
      ELSE
        # rather than setting all of these distances to max int,
          set them to distinct 'infinite' values so that they don't
          all cluster in the same bin. #
        dist[i, j] := bogus d;
        insert(q, (i, j), bogus d);
        nc +:= 1;
        IF nc = bogus n per dist THEN
          bogus d +:= 1;
          nc := 0
        FI
      FI;
      in q[i, j] := TRUE
    OD
  OD;

  WHILE n OF q > 0 DO
    IF (n OF q) MOD 1000 = 0 THEN
      printf(($"Queue size: ", g(0)l$, n OF q))
    FI;

    COORD u := pop(q);
    in q[x OF u, y OF u] := FALSE;

    IF (x OF u) = width AND (y OF u) = height THEN
      WHILE u /= undefined coord DO
        length +:= get(x OF u, y OF u);
        u := prev[x OF u, y OF u]
      OD;
      GO TO out
    FI;

    []COORD neighbors = ((x OF u, (y OF u) + 1), ((x OF u) + 1, y OF u), (x OF u, (y OF u) - 1), ((x OF u) -1, y OF u));
    FOR i FROM LWB neighbors TO UPB neighbors DO
      COORD v := neighbors[i];

      IF IF in range(width, height, v) THEN in q[x OF v, y OF v] ELSE FALSE FI THEN
        INT alt := dist[x OF u, y OF u] + get(x OF v, y OF v);
        IF alt < dist[x OF v, y OF v] THEN
          del by d(q, v, dist[x OF v, y OF v]);
          dist[x OF v, y OF v] := alt;
          insert(q, v, alt);

          prev[x OF v, y OF v] := u
        FI
      FI
    OD
  OD;

out:
  length
END;

PROC read grid = (REF FILE in, REF BOOL finished reading) REF [,]INT:
BEGIN
  REF FLEX []REF []INT lines := HEAP FLEX [1:8]REF []INT;
  INT n lines := 0;

  WHILE
    NOT finished reading
  DO
    STRING s;
    get(in, (s, newline));
    REF []INT ns := HEAP [1:UPB s]INT;
    FOR i FROM LWB s TO UPB s DO
      ns[i] := ABS(s[i]) - ABS("0")
    OD;

    n lines +:= 1;
    IF n lines > UPB lines THEN
      REF FLEX []REF []INT new lines = HEAP FLEX [2*UPB lines]REF []INT;
      new lines[:UPB lines] := lines;
      lines := new lines
    FI;
    lines[n lines] := ns
  OD;

  REF [,]INT grid = HEAP [UPB lines[1], n lines]INT;
  FOR i FROM LWB lines[1] TO UPB lines[1] DO
    FOR j FROM LWB lines TO n lines DO
      grid[i, j] := lines[j][i]
    OD
  OD;

  grid
END;

PROC main := VOID:
BEGIN
  FILE in;

  open(in, "data/data15.txt", stand in channel);
  BOOL finished reading := FALSE;
  on logical file end (in, (REF FILE f) BOOL: finished reading := TRUE);
  on format error (in, (REF FILE f) BOOL: finished reading := TRUE);

  REF [,]INT grid = read grid(in, finished reading);
  close(in);

  INT part 1 dist = dijkstra(
    UPB grid,
    2 UPB grid,
    (INT x, INT y) INT: grid[x,y]
  );

  # get the value in the expanded 5x5 grid without explicitly constructing it. #
  PROC part 2 get = (INT x, INT y) INT:
  BEGIN
    INT extra := ((x-1) OVER UPB grid) + ((y-1) OVER 2 UPB grid);
    INT v := extra + grid[((x-1) MOD UPB grid) + 1, ((y-1) MOD 2 UPB grid) + 1];
    ((v - 1) MOD 9) + 1
  END;

  INT part 2 dist = dijkstra(
    UPB grid * 5,
    (2 UPB grid) * 5,
    part 2 get
  );

  printf(($"Part 1: lowest total risk of any path = ", g(0)l$, part 1 dist));
  printf(($"Part 2: lowest total risk of any path = ", g(0)l$, part 2 dist))
END;

main
